/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        return_combo {
            bindings = <&kp RET>;
            key-positions = <45 55>;
        };

        SingleSpaceWhenDoublePressed {
            bindings = <&kp SPACE>;
            key-positions = <55 56>;
        };

        close_window {
            bindings = <&kp LA(F4)>;
            key-positions = <54 44 45 55>;
        };

        Remove_magnification_shortcut {
            bindings = <&none>;
            key-positions = <45 31>;
        };

        left_enter {
            bindings = <&kp RET>;
            key-positions = <28 27>;
        };

        right_enter_mid {
            bindings = <&kp RET>;
            key-positions = <33 34>;
        };

        altf4 {
            bindings = <&kp LA(F4)>;
            key-positions = <41 42 52>;
        };
    };

    macros {
        create_text_file: create_text_file {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F10) &kp W &kp T>;
            label = "CREATE_TEXT_FILE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC    |  1   |  2    |  3   |  4    |  5       |                    |  6       |  7    |  8      |  9    |   0    |   bsp    |
            // |  TAB    |  Q   |  W    |  E   |  R    |  T       |                    |  Y       |  U    |  I      |  O    |   P    |   \ |    |
            // |  CAPS   |  A   |  S    |  D   |  F    |  G       |   - _   ||  + =    |  H       |  J    |  K      |  L    |   ; :  |   ' "    |
            // | SHIFT   |  Z   |  X    |  C   |  V    |  B       |   ALT   ||  WIN    |  N       |  M    |  , <    |  . >  |   / ?  | SHIFT    |
            //                                 | LOWER | SPACE    |   CTL   || ENTER   | SPACE    |  RAISE|                                     

            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                           &kp N6     &kp N7  &kp N8     &kp N9   &kp N0    &kp BSPC
&kp TAB    &kp Q   &kp W   &kp E   &kp R   &kp T                            &kp Y      &kp U   &kp I      &kp O    &kp P     &kp NUBS
&kp CAPS   &kp A   &kp S   &kp D   &kp F   &kp G      &kp MINUS  &kp EQUAL  &kp H      &kp J   &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X   &kp C   &kp V   &kp B      &kp LALT   &kp LGUI   &kp N      &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                                   &mo 1   &kp SPACE  &kp LCTRL  &kp SPACE  &kp SPACE  &mo 1
            >;
        };

        //        lower_layer {
        // ------------------------------------------------------------------------------------------------------------
        // | BTCLR    | BT1        | BT2        |  BT3       |  BT4       |  BT5      |                   |           |         |         |         |         |       |
        // |  F1      |  F2        |  F3        |  F4        |  F5        |  F6       |                   |  F7       |  F8     |  F9     |  F10    |  F11    |  F12  |
        // |   `      |  !         |  @         |  #         |  $         |  %        |        ||         |  ^        |  &      |  *      |  (      |   )     |   ~   |
        // |          |            |            |            |            |           |        ||         |           |  _      |  +      |  {      |   }     |  "|"  |
        //                                                   |            |           |        ||         |           |         |                                        
        //            bindings = <
        //    &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                    &trans    &trans    &trans    &trans    &trans    &trans
        //    &kp F1     &kp F2       &kp F3       &kp F4       &kp F5       &kp F6                          &kp F7    &kp F8    &kp F9    &kp F10   &kp F11   &kp F12
        //    &kp GRAVE  &kp EXCL     &kp AT       &kp HASH     &kp DOLLAR   &kp PRCNT   &trans    &trans    &kp CARET &kp AMPS  &kp ASTRK &kp LPAR  &kp RPAR  &kp TILDE
        //    &trans     &trans       &trans       &trans       &trans       &trans      &trans    &trans    &trans    &kp MINUS &kp PLUS  &kp LBRC  &kp RBRC  &kp PIPE
        //                                                      &trans       &trans      &trans    &trans    &trans    &trans
        //            >;
        //        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | btclr |  btsel0    |  btsel1    |       |       |         |                |           |               |         |                |         |  DELETE |
            // |       |            |            |       |       |         |                |  PG_UP    |   HOME        |   ^     |  END           |   [{    |   }]    |
            // |   F1  |  F2        |  F3        |  F4   |  F5   |  F6     |      | |       |  PG_DN    |   <-          |   v     |  ->            |         |         |
            // |   F7  |  F8        |  F9        |  F10  |  F11  |  F12    |      | |       |           |   LWRD        |         |  RWRD          |         |         |
            //                                           |       |         |      | |       |           |               |                                               

            bindings = <
&bt BT_CLR   &bt BT_SEL 0       &bt BT_SEL 1  &bt BT_SEL 2  &none       &none                             &kp F1            &trans        &trans          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp DEL
&kp LS(TAB)  &create_text_file  &kp F12       &kp F2        &kp F5      &kp C_VOLUME_UP                   &kp LS(LC(LEFT))  &kp LC(LEFT)  &kp UP          &kp LC(RIGHT)     &kp LC(LS(RIGHT))  &kp GRAVE
&trans       &kp LS(LC(N))      &kp LC(X)     &kp LC(C)     &kp LC(V)   &kp C_PLAY_PAUSE  &trans  &trans  &trans            &kp LEFT      &kp DOWN        &kp RIGHT         &none              &kp LC(LS(ESCAPE))
&trans       &trans             &trans        &kp C_PREV    &kp C_NEXT  &kp C_VOL_DN      &trans  &trans  &kp LC(HOME)      &kp HOME      &kp DOWN_ARROW  &kp END           &kp LC(END)        &kp LC(LA(DEL))
                                                            &trans      &trans            &trans  &trans  &trans            &trans
            >;
        };
    };
};
